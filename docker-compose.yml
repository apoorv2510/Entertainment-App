name: Deploy to EC2 with Docker Compose

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy to EC2
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    # Build Docker Image with New Credentials
    - name: Build and Push Docker Image
      run: |
        echo "Building and pushing Docker image..."
        docker build \
          --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          --build-arg AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }} \
          --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
          --build-arg AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }} \
          --build-arg AWS_SNS_TOPIC_ARN=${{ secrets.AWS_SNS_TOPIC_ARN }} \
          --build-arg AWS_SQS_QUEUE_URL=${{ secrets.AWS_SQS_QUEUE_URL }} \
          --build-arg LAMBDA_FUNCTION_NAME=${{ secrets.LAMBDA_FUNCTION_NAME }} \
          --build-arg DB_HOST=${{ secrets.DB_HOST }} \
          --build-arg DB_USER=${{ secrets.DB_USER }} \
          --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          --build-arg DB_NAME=${{ secrets.DB_NAME }} \
          --build-arg FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }} \
          -t ${{ secrets.DOCKER_HUB_USERNAME }}/cpp-web:latest .
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/cpp-web:latest

    # Verify SSH Connection to EC2
    - name: Verify SSH Connection
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        script: |
          echo "Testing SSH connection to EC2 instance..."
          hostname
          echo "SSH connection verified successfully!"

    # Check if Docker Compose File Exists on EC2
    - name: Check if Docker Compose File Exists
      id: check-file
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        script: |
          if [ -f /home/${{ secrets.EC2_USER }}/docker-compose.yml ]; then
            echo "file_exists=true" >> $GITHUB_ENV
          else
            echo "file_exists=false" >> $GITHUB_ENV
          fi

    # Upload Docker Compose File to EC2 if it Does Not Exist
    - name: Upload Docker Compose File (If Not Exists)
      if: env.file_exists == 'false'
      uses: appleboy/scp-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        source: ./docker-compose.yml
        target: /home/${{ secrets.EC2_USER }}/docker-compose.yml

    # Deploy Application to EC2
    - name: Deploy Application with Docker Compose
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        script: |
          # Navigate to the directory
          cd /home/${{ secrets.EC2_USER }}

          # Set up AWS credentials
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
          export AWS_REGION=${{ secrets.AWS_REGION }}

          # Stop and remove old containers
          echo "Stopping and removing old containers..."
          docker compose down || true

          # Pull the latest Docker image
          echo "Pulling the latest Docker image..."
          docker compose pull

          # Start the updated application
          echo "Starting the updated application..."
          docker compose up -d

          echo "Deployment completed successfully!"
